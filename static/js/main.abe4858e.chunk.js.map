{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/brightnessByColor.js","components/Note.jsx","components/Notes.jsx","components/AddNote.jsx","components/Main.jsx","components/Body.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["AppHeader","styled","div","Header","Icon","name","AppFooter","Footer","href","target","brightnessByColor","colour","r","g","b","color","isHEX","indexOf","isRGB","hasFullSpec","length","match","substr","parseInt","icons","delete","cancel","save","NoteWrapper","NoteToolbar","NoteBody","Note","props","mainStateDispatchFunction","useContext","mainStateDispatchContext","useState","body","tempBody","setTempBody","tempBgColor","setTempBgColor","editMode","setEditMode","style","backgroundColor","editSaveHandler","useCallback","type","id","editCancelHandler","handleColorChange","event","hex","bodyEditable","value","onChange","e","bodyReadonly","onClick","readOnly","deleteButton","colorPicker","onChangeComplete","saveButton","cancelButton","React","memo","Notes","notesJSX","notes","sort","a","timeAdded","map","note","AddNoteWrapper","blankNoteTemplate","AddNote","onAdd","newBlankNote","uniqueId","Math","floor","random","addTime","Date","getTime","newNote","createContext","NotesGrid","initialState","startingNote","Main","useReducer","state","action","stateFromLocalStorage","newNotes","index","findIndex","filter","Object","assign","notesDispatch","useEffect","notesFromLocalStorage","window","localStorage","JSON","parse","updateStateFromLocalStorage","setItem","stringify","Provider","AppBody","Body","stylingVariables","bgColor","black","gray","white","styleContext","GlobalStyle","createGlobalStyle","AppWrapper","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.abe4858e.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nconst AppHeader = styled.div`\r\n  padding-top: 25px; /*margin collapsing fix*/\r\n  padding: 25px;\r\n  h1 {\r\n    color: #000;\r\n  }\r\n  h3 {\r\n    color: #808080;\r\n  }\r\n`;\r\n\r\nfunction Header() {\r\n  return (\r\n    <AppHeader>\r\n      <header>\r\n        <h1>\r\n          <Icon name=\"sticky note\" />\r\n          NotesDesk\r\n        </h1>\r\n        <h3>Simple sticky notes app created with react.js</h3>\r\n      </header>\r\n    </AppHeader>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst AppFooter = styled.div`\r\n  padding: 20px;\r\n  background-color: #333;\r\n  color: #d3d3d3;\r\n  footer {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    @media screen and (max-width: 480px) {\r\n      flex-direction: column-reverse;\r\n    }\r\n    align-items: center;\r\n    a {\r\n      text-decoration: none;\r\n      color: inherit;\r\n      transition: color 0.3s ease-in;\r\n    }\r\n    a:hover {\r\n      color: #fff;\r\n    }\r\n    h4 {\r\n      display: inline-block;\r\n      margin: 0;\r\n      &:first-child {\r\n        font-size: 0.8rem;\r\n        opacity: 0.7;\r\n      }\r\n      &:last-child {\r\n        padding: 6px;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Footer() {\r\n  return (\r\n    <AppFooter>\r\n      <footer>\r\n        <h4>\r\n          This web application was created for educational purposes.\r\n          All of your data is stored in the browser local storage which is temporary. <br/>\r\n          Don't save any sensitive information. <br/>\r\n        </h4>\r\n        <h4>\r\n          Made with ‚ù§ by\r\n          <a href=\"https://github.com/armanDark\" target=\"_blank\"> Arman Grigoryan</a>\r\n        </h4>\r\n      </footer>\r\n    </AppFooter>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","/**\r\n * Calculate brightness value by RGB or HEX color.\r\n * @param colour (String) The color value in RGB or HEX (for example: #000000 || #000 || rgb(0,0,0) || rgba(0,0,0,0))\r\n * @returns (Number) The brightness value (dark) 0 ... 255 (light)\r\n */\r\nconst brightnessByColor = (colour) => {\r\n  let color = '' + colour; \r\n  let isHEX = colour.indexOf('#') === 0; \r\n  let isRGB = colour.indexOf('rgb') === 0;\r\n\r\n  const hasFullSpec = color.length === 7;\r\n  let match = color.substr(1).match(hasFullSpec ? /(\\S{2})/g : /(\\S{1})/g);\r\n  let r, g, b;\r\n\r\n  if (isHEX) {\r\n    if (match) {\r\n      r = parseInt(match[0] + (hasFullSpec ? '' : match[0]), 16); g = parseInt(match[1] + (hasFullSpec ? '' : match[1]), 16); b = parseInt(match[2] + (hasFullSpec ? '' : match[2]), 16);\r\n    }\r\n  }\r\n    \r\n  if (isRGB) {\r\n    match = color.match(/(\\d+){3}/g);\r\n    if (match) {\r\n      r = match[0]; \r\n      g = match[1]; \r\n      b = match[2];\r\n    }\r\n  }\r\n  if (typeof r != 'undefined') return ((r*299)+(g*587)+(b*114))/1000;\r\n};\r\n\r\nexport default brightnessByColor;\r\n","import React, { useCallback, useContext, useState } from 'react';\r\nimport { mainStateDispatchContext } from './Main';\r\nimport brightnessByColor from './brightnessByColor';\r\nimport styled from 'styled-components';\r\nimport { GithubPicker } from 'react-color';\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nconst icons = {\r\n  delete: <Icon name='delete' />,\r\n  cancel: <Icon name='ban' />,\r\n  save: <Icon name='save' />,\r\n};\r\n\r\nconst NoteWrapper = styled.div`\r\n  border: 1px solid;\r\n  border-bottom-right-radius: 16px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  button {\r\n      background: none;\r\n      border: none;\r\n      outline: none;\r\n  }\r\n`;\r\n\r\nconst NoteToolbar = styled.div`\r\n  background-color: rgba(256,256,256,0.7);\r\n  padding: 5px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n`;\r\n\r\nconst NoteBody = styled.div`\r\n  flex-grow: 1;\r\n  padding: 10px;\r\n  textarea {\r\n    width: 100%;\r\n    height: 100%;\r\n    background: none;\r\n    border: none;\r\n    outline: none;\r\n    color: inherit;\r\n    padding: 10px 5px;\r\n    resize: none;\r\n    font-size: 1rem;\r\n    font-family: inherit;\r\n  }\r\n}\r\n`;\r\n\r\nconst Note = (props) => {\r\n  /**\r\n   * the dispatch function of the state of 'Main' component \r\n   * @param {object} action\r\n   */\r\n  const mainStateDispatchFunction = useContext(mainStateDispatchContext);\r\n  const [tempBody, setTempBody] = useState(props.body);\r\n  const [tempBgColor, setTempBgColor] = useState(props.color);\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const style = {\r\n    backgroundColor: tempBgColor,\r\n    color: ((brightnessByColor(tempBgColor)) > 150 ? '#2b2a2a' : '#fcfcfa'),\r\n  };\r\n\r\n  /**\r\n   * to pass the temp state to the main state\r\n   */\r\n  const editSaveHandler = useCallback(() => {\r\n    mainStateDispatchFunction({\r\n      type: 'edit',\r\n      body: tempBody,\r\n      color: tempBgColor,\r\n      id: props.id,\r\n    });\r\n    setEditMode(false);\r\n  }, [tempBody, tempBgColor, editMode]);\r\n\r\n  /**\r\n   * to return the note to its last saved state\r\n   */\r\n  const editCancelHandler = useCallback(() => {\r\n    setTempBody(props.body);\r\n    setTempBgColor(props.color);\r\n    setEditMode(false);\r\n  }, [tempBody, tempBgColor, editMode]);\r\n\r\n  /**\r\n   * passes the chosen color to the temp. state of the note\r\n   * @param {string} color\r\n   * @param {object} event\r\n   */\r\n  const handleColorChange = useCallback((color, event) => {\r\n    setTempBgColor(color.hex);\r\n  }, [tempBody, tempBgColor, editMode]);\r\n\r\n  const bodyEditable = <textarea value={tempBody} onChange={e => setTempBody(e.target.value)}></textarea>;\r\n  const bodyReadonly = <textarea value={tempBody} onClick={() => setEditMode(true)} readOnly></textarea>;\r\n  const deleteButton = <button onClick={ () => mainStateDispatchFunction({type: 'delete', id: props.id})}>{ icons.delete }</button>;\r\n  //note editing mode\r\n  const colorPicker = <GithubPicker onChangeComplete={handleColorChange}/>;\r\n  const saveButton = <button onClick={() => editSaveHandler()}>{icons.save} Save</button>;\r\n  const cancelButton = <button onClick={() => editCancelHandler()}>{icons.cancel} Cancel</button>;\r\n  return (\r\n    <NoteWrapper style={style}>\r\n      <NoteToolbar>\r\n        {editMode ? <> {colorPicker} {saveButton} {cancelButton}</> : <>{deleteButton}</> }\r\n      </NoteToolbar>\r\n      <NoteBody>\r\n        {editMode ? <>{bodyEditable}</> : <>{bodyReadonly}</>}\r\n      </NoteBody>\r\n    </NoteWrapper>\r\n  );\r\n}\r\n\r\nexport default React.memo(Note);\r\n","import React from 'react';\r\nimport Note from './Note';\r\n\r\nconst Notes = (props) => {\r\n  const { notes } = props;\r\n  // to sort the notes by descending order\r\n  const notesSorted = notes.sort((a, b) => b.timeAdded - a.timeAdded);\r\n\r\n  const notesJSX = notesSorted.map((note) => {\r\n    return <Note body={note.body} color={note.color} id={note.id} key={note.id} />;\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {notesJSX}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Notes;\r\n","import React, { useState, useContext, useCallback } from 'react';\r\nimport { mainStateDispatchContext } from './Main';\r\nimport styled from 'styled-components';\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nconst AddNoteWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #333;\r\n  button {\r\n    background: none;\r\n    border: none;\r\n    outline: none;\r\n    font-size: 3rem;\r\n    color: inherit;\r\n  }\r\n`;\r\n\r\nconst blankNoteTemplate = {\r\n  id: '',\r\n  body: '',\r\n  color: '#FEF3BD',\r\n  timeAdded: '',\r\n};\r\n\r\nconst AddNote = (props) => {\r\n  /**\r\n   * the dispatch function of the state of 'Main' component\r\n   * @param {object} action\r\n   */\r\n  const mainStateDispatchFunction = useContext(mainStateDispatchContext);\r\n\r\n  /**\r\n   * attaches a unique id and a timestamp to a blank note and sends to\r\n   * Main component's dispatch function\r\n   */\r\n  const onAdd = useCallback(() => {\r\n    let newBlankNote = blankNoteTemplate;\r\n    const uniqueId = Math.floor(Math.random() * (10**8));\r\n    const addTime = new Date().getTime();\r\n    newBlankNote.id = uniqueId;\r\n    newBlankNote.timeAdded = addTime;\r\n    mainStateDispatchFunction({ type: 'add', newNote: newBlankNote});\r\n  }, []);\r\n\r\n  return (\r\n    <AddNoteWrapper>\r\n      <button onClick={() => onAdd()}>\r\n        <Icon name='add' />\r\n      </button>\r\n    </AddNoteWrapper>\r\n  );\r\n}\r\n\r\nexport default AddNote;\r\n","import React, { useReducer, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Notes from './Notes';\r\nimport AddNote from './AddNote';\r\n\r\nexport const mainStateDispatchContext = React.createContext();\r\n\r\nconst NotesGrid = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 1300px;\r\n  display: grid;\r\n  grid-gap: 20px;\r\n  grid-template-columns: repeat(auto-fit, 300px);\r\n  grid-auto-rows: minmax(100px, 300px);\r\n  justify-content: center;\r\n\r\n  @media screen and (max-width: 420px) {\r\n    grid-template-columns: 250px;\r\n    grid-template-rows: 100px;\r\n    grid-auto-rows: 250px;\r\n  }\r\n`;\r\n\r\nconst initialState = [\r\n];\r\n\r\n// gets displayed if it's the first visit \r\nconst startingNote = {\r\n  id: 1,\r\n  body: 'Welcome to NotesDesk! \\n\\nYou can add your own notes here by clicking on the plus icon. \\nTo edit the note or change its color, simply click on it. \\nHave a great experience!',\r\n  color: '#FEF3BD',\r\n  timeAdded: 1,\r\n};\r\n\r\nconst Main = (props) => {\r\n\r\n  const mainStateReducer = (state, action = {\r\n    type: null, newNote: null, id: null, color: null, stateFromLocalStorage: null,\r\n  }) => {\r\n    if (action.type === 'edit') {\r\n      const newNotes = state;\r\n      const index = state.findIndex((note) => note.id === action.id);\r\n\r\n      if (index !== -1) {\r\n        newNotes[index].color = action.color;\r\n        newNotes[index].body = action.body;\r\n      }\r\n      return [...newNotes];\r\n    }\r\n\r\n    if (action.type === 'delete') {\r\n      const newNotes = state.filter((note) => !(note.id === action.id));\r\n      return newNotes;\r\n    }\r\n\r\n    if (action.type === 'add') {\r\n      const newNote = action.newNote;\r\n      return [...state, Object.assign({}, newNote)];\r\n    }\r\n\r\n    if (action.type === 'sync') {\r\n      return action.stateFromLocalStorage;\r\n    }\r\n\r\n    else { return state; }\r\n  };\r\n\r\n  const [notes, notesDispatch] = useReducer(mainStateReducer, initialState);\r\n\r\n  const updateStateFromLocalStorage = () => {\r\n    let notesFromLocalStorage = [startingNote];\r\n    try {\r\n      let notes = window.localStorage.notes;\r\n      if (notes) {\r\n        notesFromLocalStorage = JSON.parse(notes);\r\n      }\r\n    } finally {\r\n      notesDispatch({type: 'sync', stateFromLocalStorage: notesFromLocalStorage});\r\n    }\r\n  };\r\n\r\n  const updateLocalStorageFromState = () => {\r\n    window.localStorage.setItem('notes', JSON.stringify(notes));\r\n  };\r\n\r\n  // get user data from local storage on component mount\r\n  useEffect(() => {\r\n    updateStateFromLocalStorage();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    updateLocalStorageFromState();\r\n  }, [notes]);\r\n\r\n  return (\r\n    <NotesGrid>\r\n      <mainStateDispatchContext.Provider value={notesDispatch}>\r\n        <AddNote notes={notes} />\r\n        <Notes notes={notes} />\r\n      </mainStateDispatchContext.Provider>\r\n    </NotesGrid>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport Main from './Main';\r\nimport styled from 'styled-components';\r\n\r\nconst AppBody = styled.div`\r\n  padding: 40px 10px;\r\n`;\r\n\r\nconst Body = (props) => {\r\n  return (\r\n    <AppBody>\r\n      <Main />\r\n    </AppBody>\r\n  );\r\n}\r\n\r\nexport default Body;\r\n","// import logo from './logo.svg';\r\nimport React from 'react';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport Body from './components/Body';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\nimport './App.css';\r\n\r\nconst stylingVariables = {\r\n  bgColor: '#fffcde',\r\n  black: '#121212',\r\n  gray: '#545353',\r\n  white: '#f7f7f7',\r\n};\r\n\r\nexport const styleContext = React.createContext();\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  :root {\r\n    font-size: 1em;\r\n  }\r\n\r\n  @media screen and (max-width: 420px) {\r\n    :root {\r\n      font-size: 0.875em;\r\n    }\r\n  }\r\n`;\r\n\r\nconst AppWrapper = styled.div`\r\n  text-align: center;\r\n  /**/\r\n  background-color: ${stylingVariables.bgColor};\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst App = (props) => {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <styleContext.Provider value={stylingVariables}>\r\n        <AppWrapper>\r\n          <Header />\r\n          <Body />\r\n          <Footer />\r\n        </AppWrapper>\r\n      </styleContext.Provider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}