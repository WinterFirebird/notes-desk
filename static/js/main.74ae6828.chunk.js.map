{"version":3,"sources":["redux/notesTypes.js","redux/notesReducer.js","redux/store.js","components/Header.jsx","components/Footer.jsx","redux/notesActions.js","components/brightnessByColor.js","components/Note.jsx","components/Notes.jsx","components/AddNote.jsx","components/Main.jsx","components/Body.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["ADD","DELETE","EDIT","SYNC","initialState","notes","notesReducer","state","action","type","newNote","payload","Object","assign","idToDelete","notesUpdated","filter","note","id","color","body","newNotesEdited","index","findIndex","notesFromLocalStorage","notesStore","createStore","composeWithDevTools","applyMiddleware","AppHeader","styled","div","Header","Icon","name","AppFooter","Footer","href","target","editNote","brightnessByColor","colour","r","g","b","isHEX","indexOf","isRGB","hasFullSpec","length","match","substr","parseInt","icons","delete","cancel","save","NoteWrapper","NoteToolbar","NoteBody","React","memo","connect","dispatch","deleteNote","props","useState","tempBody","setTempBody","tempBgColor","setTempBgColor","editMode","setEditMode","style","backgroundColor","editSaveHandler","useCallback","editCancelHandler","handleColorChange","event","hex","deleteButton","onClick","bodyEditable","value","onChange","e","bodyReadonly","readOnly","colorPicker","onChangeComplete","saveButton","cancelButton","Notes","notesJSX","sort","a","timeAdded","map","Wrapper","blankNoteTemplate","addNote","onAdd","newBlankNote","Math","floor","random","Date","getTime","NotesGrid","startingNote","syncNotes","useEffect","window","localStorage","JSON","parse","updateStateFromLocalStorage","setItem","stringify","AppBody","Body","stylingVariables","bgColor","black","gray","white","styleContext","createContext","GlobalStyle","createGlobalStyle","AppWrapper","App","store","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74ae6828.chunk.js","sourcesContent":["export const ADD = 'ADD';\r\nexport const DELETE = 'DELETE';\r\nexport const EDIT = 'EDIT';\r\nexport const SYNC = 'SYNC';","import { ADD, DELETE, EDIT, SYNC } from './notesTypes';\r\n\r\nconst initialState = {\r\n  notes: [],\r\n};\r\n\r\nconst notesReducer = (state = initialState, action) => {\r\n  switch(action.type) {\r\n    case ADD:\r\n      const newNote = action.payload;\r\n      return {\r\n        notes: [...state.notes, Object.assign({}, newNote)], \r\n      };\r\n    case DELETE:\r\n      const idToDelete = action.payload;\r\n      const notesUpdated = state.notes.filter((note) => !(note.id === idToDelete));\r\n      return {\r\n        notes: notesUpdated,\r\n      };\r\n    case EDIT:\r\n      const { id, color, body } = action.payload;\r\n      let newNotesEdited = state.notes;\r\n      let index = state.notes.findIndex((note) => note.id === id);\r\n      if (index !== -1) {\r\n        newNotesEdited[index].color = color;\r\n        newNotesEdited[index].body = body;\r\n      }\r\n      return {\r\n        notes: [...newNotesEdited],\r\n      };\r\n    case SYNC:\r\n      const notesFromLocalStorage = action.payload;\r\n      return {\r\n        notes: notesFromLocalStorage,\r\n      };\r\n    default: return state;\r\n  }\r\n};\r\n\r\nexport default notesReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport notesReducer from './notesReducer';\r\n\r\nconst notesStore = createStore(notesReducer, composeWithDevTools(applyMiddleware()));\r\n\r\nexport default notesStore;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nconst AppHeader = styled.div`\r\n  padding-top: 25px; /*margin collapsing fix*/\r\n  padding: 25px;\r\n  h1 {\r\n    color: #000;\r\n  }\r\n  h3 {\r\n    color: #808080;\r\n  }\r\n`;\r\n\r\nfunction Header() {\r\n  return (\r\n    <AppHeader>\r\n      <header>\r\n        <h1>\r\n          <Icon name=\"sticky note\" />\r\n          NotesDesk\r\n        </h1>\r\n        <h3>Simple sticky notes app created with react.js</h3>\r\n      </header>\r\n    </AppHeader>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst AppFooter = styled.div`\r\n  padding: 20px;\r\n  background-color: #333;\r\n  color: #d3d3d3;\r\n  footer {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    @media screen and (max-width: 480px) {\r\n      flex-direction: column-reverse;\r\n    }\r\n    align-items: center;\r\n    a {\r\n      text-decoration: none;\r\n      color: inherit;\r\n      transition: color 0.3s ease-in;\r\n    }\r\n    a:hover {\r\n      color: #fff;\r\n    }\r\n    h4 {\r\n      display: inline-block;\r\n      margin: 0;\r\n      &:first-child {\r\n        font-size: 0.8rem;\r\n        opacity: 0.7;\r\n      }\r\n      &:last-child {\r\n        padding: 6px;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Footer() {\r\n  return (\r\n    <AppFooter>\r\n      <footer>\r\n        <h4>\r\n          This web application was created for educational purposes.\r\n          All of your data is stored in the browser local storage which is temporary. <br/>\r\n          Don't save any sensitive information. <br/>\r\n        </h4>\r\n        <h4>\r\n          Made with ❤ by\r\n          <a href=\"https://github.com/armanDark\" target=\"_blank\"> Arman Grigoryan</a>\r\n        </h4>\r\n      </footer>\r\n    </AppFooter>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import { ADD, DELETE, EDIT, SYNC } from './notesTypes';\r\n\r\nexport const addNote = (newNote) => {\r\n  return {\r\n    type: ADD,\r\n    payload: newNote,\r\n  };\r\n};\r\n\r\nexport const deleteNote = (id) => {\r\n  return {\r\n    type: DELETE,\r\n    payload: id,\r\n  };\r\n};\r\n\r\nexport const editNote = (payload = {id: null, color: null, body: null}) => {\r\n  return {\r\n    type: EDIT,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const syncNotes = (notesFromLocalStorage) => {\r\n  return {\r\n    type: SYNC,\r\n    payload: notesFromLocalStorage,\r\n  };\r\n};","/**\r\n * Calculate brightness value by RGB or HEX color.\r\n * @param colour (String) The color value in RGB or HEX (for example: #000000 || #000 || rgb(0,0,0) || rgba(0,0,0,0))\r\n * @returns (Number) The brightness value (dark) 0 ... 255 (light)\r\n */\r\nconst brightnessByColor = (colour) => {\r\n  let color = '' + colour; \r\n  let isHEX = colour.indexOf('#') === 0; \r\n  let isRGB = colour.indexOf('rgb') === 0;\r\n\r\n  const hasFullSpec = color.length === 7;\r\n  let match = color.substr(1).match(hasFullSpec ? /(\\S{2})/g : /(\\S{1})/g);\r\n  let r, g, b;\r\n\r\n  if (isHEX) {\r\n    if (match) {\r\n      r = parseInt(match[0] + (hasFullSpec ? '' : match[0]), 16); g = parseInt(match[1] + (hasFullSpec ? '' : match[1]), 16); b = parseInt(match[2] + (hasFullSpec ? '' : match[2]), 16);\r\n    }\r\n  }\r\n    \r\n  if (isRGB) {\r\n    match = color.match(/(\\d+){3}/g);\r\n    if (match) {\r\n      r = match[0]; \r\n      g = match[1]; \r\n      b = match[2];\r\n    }\r\n  }\r\n  if (typeof r != 'undefined') return ((r*299)+(g*587)+(b*114))/1000;\r\n};\r\n\r\nexport default brightnessByColor;\r\n","import React, { useCallback, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { editNote, deleteNote } from '../redux';\r\nimport brightnessByColor from './brightnessByColor';\r\nimport styled from 'styled-components';\r\nimport { GithubPicker } from 'react-color';\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nconst icons = {\r\n  delete: <Icon name='delete' />,\r\n  cancel: <Icon name='ban' />,\r\n  save: <Icon name='save' />,\r\n};\r\n\r\nconst NoteWrapper = styled.div`\r\n  border: 1px solid;\r\n  border-bottom-right-radius: 16px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  button {\r\n      background: none;\r\n      border: none;\r\n      outline: none;\r\n  }\r\n`;\r\n\r\nconst NoteToolbar = styled.div`\r\n  background-color: rgba(256,256,256,0.7);\r\n  padding: 5px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n`;\r\n\r\nconst NoteBody = styled.div`\r\n  flex-grow: 1;\r\n  padding: 10px;\r\n  textarea {\r\n    width: 100%;\r\n    height: 100%;\r\n    background: none;\r\n    border: none;\r\n    outline: none;\r\n    color: inherit;\r\n    padding: 10px 5px;\r\n    resize: none;\r\n    font-size: 1rem;\r\n    font-family: inherit;\r\n  }\r\n}\r\n`;\r\n\r\nconst Note = (props) => {\r\n  // functions for dispatching a delete or edit action\r\n  const { editNote, deleteNote } = props;\r\n\r\n  // temprorary values of the note\r\n  const [tempBody, setTempBody] = useState(props.body);\r\n  const [tempBgColor, setTempBgColor] = useState(props.color);\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  // styles of the note\r\n  const style = {\r\n    backgroundColor: tempBgColor,\r\n    color: ((brightnessByColor(tempBgColor)) > 150 ? '#2b2a2a' : '#fcfcfa'),\r\n  };\r\n\r\n  /**\r\n   * to pass the temp state to the redux store\r\n   */\r\n  const editSaveHandler = useCallback(() => {\r\n    editNote({\r\n      body: tempBody,\r\n      color: tempBgColor,\r\n      id: props.id,\r\n    });\r\n    setEditMode(false);\r\n  }, [tempBody, tempBgColor, editMode]);\r\n\r\n  /**\r\n   * to return the note to its last saved state\r\n   */\r\n  const editCancelHandler = useCallback(() => {\r\n    setTempBody(props.body);\r\n    setTempBgColor(props.color);\r\n    setEditMode(false);\r\n  }, [tempBody, tempBgColor, editMode]);\r\n\r\n  /**\r\n   * passes the chosen color to the temp state of the note\r\n   * @param {string} color\r\n   * @param {object} event\r\n   */\r\n  const handleColorChange = useCallback((color, event) => {\r\n    setTempBgColor(color.hex);\r\n  }, [tempBody, tempBgColor, editMode]);\r\n\r\n\r\n  const deleteButton = <button onClick={ () => deleteNote(props.id)}>{ icons.delete }</button>;\r\n  // the editable textarea displayed when user clicks on the note\r\n  const bodyEditable = <textarea value={tempBody} onChange={e => setTempBody(e.target.value)}></textarea>;\r\n  // the read-only textarea displayed when user isn't editing the note\r\n  const bodyReadonly = <textarea value={tempBody} onClick={() => setEditMode(true)} readOnly></textarea>;\r\n  // note editing mode\r\n  const colorPicker = <GithubPicker onChangeComplete={handleColorChange}/>;\r\n  const saveButton = <button onClick={() => editSaveHandler()}>{icons.save} Save</button>;\r\n  const cancelButton = <button onClick={() => editCancelHandler()}>{icons.cancel} Cancel</button>;\r\n  return (\r\n    <NoteWrapper style={style}>\r\n      <NoteToolbar>\r\n        {editMode ? <> {colorPicker} {saveButton} {cancelButton}</> : <>{deleteButton}</> }\r\n      </NoteToolbar>\r\n      <NoteBody>\r\n        {editMode ? <>{bodyEditable}</> : <>{bodyReadonly}</>}\r\n      </NoteBody>\r\n    </NoteWrapper>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    editNote: (payload = {id: null, color: null, body: null}) => dispatch(editNote(payload)),\r\n    deleteNote: (id) => dispatch(deleteNote(id)),\r\n  }\r\n};\r\n\r\nexport default React.memo(connect(null, mapDispatchToProps)(Note)); \r\n","import React from 'react';\r\nimport Note from './Note';\r\n\r\nconst Notes = ({ notes }) => {\r\n  // to sort the notes by descending order\r\n  const notesSorted = notes.sort((a, b) => b.timeAdded - a.timeAdded);\r\n\r\n  const notesJSX = notesSorted.map((note) => {\r\n    return <Note body={note.body} color={note.color} id={note.id} key={note.id} />;\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {notesJSX}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Notes;\r\n","import React, { useCallback } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addNote } from '../redux';\r\nimport styled from 'styled-components';\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #333;\r\n  button {\r\n    background: none;\r\n    border: none;\r\n    outline: none;\r\n    font-size: 3rem;\r\n    color: inherit;\r\n  }\r\n`;\r\n\r\nconst blankNoteTemplate = {\r\n  id: '',\r\n  body: '',\r\n  color: '#FEF3BD',\r\n  timeAdded: '',\r\n};\r\n\r\nconst AddNote = (props) => {\r\n  // function for dispatching an adding a note action\r\n  const { addNote } = props;\r\n\r\n  /**\r\n   * attaches a unique id and a timestamp to a blank note and sends to\r\n   * Main component's dispatch function\r\n   */\r\n  const onAdd = useCallback(() => {\r\n    let newBlankNote = blankNoteTemplate;\r\n    newBlankNote.id = Math.floor(Math.random() * (10**8));\r\n    newBlankNote.timeAdded = new Date().getTime();\r\n    addNote(newBlankNote);\r\n  }, []);\r\n\r\n  return (\r\n    <Wrapper>\r\n      <button onClick={() => onAdd()}>\r\n        <Icon name='add' />\r\n      </button>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addNote: (newNote) => dispatch(addNote(newNote)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(AddNote);\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { syncNotes } from '../redux';\r\nimport styled from 'styled-components';\r\nimport Notes from './Notes';\r\nimport AddNote from './AddNote';\r\n\r\n\r\nconst NotesGrid = styled.div`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  max-width: 1300px;\r\n  display: grid;\r\n  grid-gap: 20px;\r\n  grid-template-columns: repeat(auto-fit, 300px);\r\n  grid-auto-rows: minmax(100px, 300px);\r\n  justify-content: center;\r\n\r\n  @media screen and (max-width: 420px) {\r\n    grid-template-columns: 250px;\r\n    grid-template-rows: 100px;\r\n    grid-auto-rows: 250px;\r\n  }\r\n`;\r\n\r\n// gets displayed if it's the first visit \r\nconst startingNote = {\r\n  notes: [{\r\n    id: 1,\r\n    body: 'Welcome to NotesDesk! \\n\\nYou can add your own notes here by clicking on the plus icon. \\nTo edit the note or change its color, simply click on it. \\nHave a great experience!',\r\n    color: '#FEF3BD',\r\n    timeAdded: 1,\r\n  }]\r\n};\r\n\r\nconst Main = ({ notes, syncNotes }) => {\r\n\r\n  const updateStateFromLocalStorage = () => {\r\n    let notesFromLocalStorage = [startingNote];\r\n    try {\r\n      let notes = window.localStorage.notes;\r\n      if (notes) {\r\n        notesFromLocalStorage = JSON.parse(notes);\r\n      }\r\n    } finally {\r\n      syncNotes(notesFromLocalStorage);\r\n    }\r\n  };\r\n\r\n  const updateLocalStorageFromState = () => {\r\n    window.localStorage.setItem('notes', JSON.stringify(notes));\r\n  };\r\n\r\n  // get user data from local storage on component mount\r\n  useEffect(() => {\r\n    updateStateFromLocalStorage();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    updateLocalStorageFromState();\r\n  }, [notes]);\r\n\r\n  return (\r\n    <NotesGrid>\r\n        <AddNote notes={notes} />\r\n        <Notes notes={notes} />\r\n    </NotesGrid>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    notes: state.notes,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    syncNotes: (notesFromLocalStorage) => dispatch(syncNotes(notesFromLocalStorage)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\r\n","import React from 'react';\r\nimport Main from './Main';\r\nimport styled from 'styled-components';\r\n\r\nconst AppBody = styled.div`\r\n  padding: 40px 10px;\r\n`;\r\n\r\nconst Body = (props) => {\r\n  return (\r\n    <AppBody>\r\n      <Main />\r\n    </AppBody>\r\n  );\r\n}\r\n\r\nexport default Body;\r\n","// import logo from './logo.svg';\r\nimport React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport notesStore from './redux/store';\r\nimport Header from './components/Header';\r\nimport Footer from './components/Footer';\r\nimport Body from './components/Body';\r\nimport styled, { createGlobalStyle } from 'styled-components';\r\nimport './App.css';\r\n\r\nconst stylingVariables = {\r\n  bgColor: '#fffcde',\r\n  black: '#121212',\r\n  gray: '#545353',\r\n  white: '#f7f7f7',\r\n};\r\n\r\nexport const styleContext = React.createContext();\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  :root {\r\n    font-size: 1em;\r\n  }\r\n\r\n  @media screen and (max-width: 420px) {\r\n    :root {\r\n      font-size: 0.875em;\r\n    }\r\n  }\r\n`;\r\n\r\nconst AppWrapper = styled.div`\r\n  text-align: center;\r\n  /**/\r\n  background-color: ${stylingVariables.bgColor};\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst App = (props) => {\r\n  return (\r\n    <Provider store={notesStore}>\r\n      <GlobalStyle />\r\n      <styleContext.Provider value={stylingVariables}>\r\n        <AppWrapper>\r\n          <Header />\r\n          <Body />\r\n          <Footer />\r\n        </AppWrapper>\r\n      </styleContext.Provider>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}