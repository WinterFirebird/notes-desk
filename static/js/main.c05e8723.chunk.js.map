{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/brightnessByColor.js","components/Note.jsx","components/Notes.jsx","components/AddNote.jsx","components/Main.jsx","components/Body.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["AppHeader","styled","div","AppHeaderH1","h1","AppHeaderH3","h3","Header","Icon","name","AppFooter","A","a","Footer","href","target","brightnessByColor","colour","r","g","b","color","isHEX","indexOf","isRGB","hasFullSpec","length","match","substr","parseInt","icons","delete","cancel","save","NoteWrapper","NoteToolbar","NoteBody","Note","props","mainStateDispatchFunction","useContext","mainStateDispatchContext","useState","body","tempBody","setTempBody","tempBgColor","setTempBgColor","editMode","setEditMode","style","backgroundColor","editSaveHandler","useCallback","type","id","editCancelHandler","console","log","handleColorChange","event","hex","bodyEditable","value","onChange","e","bodyReadonly","onClick","readOnly","deleteButton","colorPicker","onChangeComplete","saveButton","cancelButton","React","memo","Notes","notesJSX","notes","sort","timeAdded","map","note","AddNoteWrapper","AddNoteButton","button","AddNote","noteTemp","setNoteTemp","addIcon","onAdd","addTime","Date","getTime","newNote","uniqueId","getUTCMilliseconds","createContext","NotesGrid","initialState","Main","useReducer","action","newNotes","index","findIndex","filter","notesDispatch","Provider","AppBody","Body","stylingVariables","bgColor","black","gray","white","styleContext","GlobalStyle","createGlobalStyle","AppWrapper","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c05e8723.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nconst AppHeader = styled.div`\r\n  padding-top: 25px; /*margin collapsing fix*/\r\n  padding: 25px;\r\n`;\r\n\r\nconst AppHeaderH1 = styled.h1`\r\n  color: #000;\r\n`;\r\n\r\nconst AppHeaderH3 = styled.h3`\r\n  color: #808080;\r\n`;\r\n\r\nfunction Header() {\r\n  return (\r\n    <AppHeader>\r\n      <header>\r\n        <AppHeaderH1>\r\n          <Icon name=\"sticky note\" />\r\n          NotesDesk\r\n        </AppHeaderH1>\r\n        <AppHeaderH3>Simple sticky notes app created with React.js</AppHeaderH3>\r\n      </header>\r\n    </AppHeader>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst AppFooter = styled.div`\r\n  padding: 20px;\r\n  background-color: #333;\r\n  color: #ffffff;\r\n`;\r\n\r\nconst A = styled.a`\r\n  text-decoration: none;\r\n  color: #ffffff;\r\n`;\r\n\r\nfunction Footer() {\r\n  return (\r\n    <AppFooter>\r\n      <footer>\r\n        <h4>\r\n          Created by\r\n          <A href=\"https://github.com/WinterFirebird\" target=\"_blank\">Arman Grigoryan</A>\r\n        </h4>\r\n      </footer>\r\n    </AppFooter>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","/**\r\n * Calculate brightness value by RGB or HEX color.\r\n * @param colour (String) The color value in RGB or HEX (for example: #000000 || #000 || rgb(0,0,0) || rgba(0,0,0,0))\r\n * @returns (Number) The brightness value (dark) 0 ... 255 (light)\r\n */\r\nconst brightnessByColor = (colour) => {\r\n  let color = '' + colour; \r\n  let isHEX = colour.indexOf('#') === 0; \r\n  let isRGB = colour.indexOf('rgb') === 0;\r\n\r\n  const hasFullSpec = color.length === 7;\r\n  let match = color.substr(1).match(hasFullSpec ? /(\\S{2})/g : /(\\S{1})/g);\r\n  let r, g, b;\r\n\r\n  if (isHEX) {\r\n    if (match) {\r\n      r = parseInt(match[0] + (hasFullSpec ? '' : match[0]), 16); g = parseInt(match[1] + (hasFullSpec ? '' : match[1]), 16); b = parseInt(match[2] + (hasFullSpec ? '' : match[2]), 16);\r\n    }\r\n  }\r\n    \r\n  if (isRGB) {\r\n    match = color.match(/(\\d+){3}/g);\r\n    if (match) {\r\n      r = match[0]; \r\n      g = match[1]; \r\n      b = match[2];\r\n    }\r\n  }\r\n  if (typeof r != 'undefined') return ((r*299)+(g*587)+(b*114))/1000;\r\n};\r\n\r\nexport default brightnessByColor;\r\n","import React, { useCallback, useContext, useState } from 'react';\r\nimport { mainStateDispatchContext } from './Main';\r\nimport brightnessByColor from './brightnessByColor';\r\nimport styled from 'styled-components';\r\nimport { GithubPicker } from 'react-color';\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nconst icons = {\r\n  delete: <Icon name='delete' />,\r\n  cancel: <Icon name='ban' />,\r\n  save: <Icon name='save' />,\r\n};\r\n\r\nconst NoteWrapper = styled.div`\r\n  border: 1px solid;\r\n  border-bottom-right-radius: 16px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  button {\r\n      background: none;\r\n      border: none;\r\n      outline: none;\r\n  }\r\n`;\r\n\r\nconst NoteToolbar = styled.div`\r\n  background-color: rgba(256,256,256,0.7);\r\n  padding: 5px;\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n`;\r\n\r\nconst NoteBody = styled.div`\r\n  flex-grow: 1;\r\n  padding: 10px;\r\n  textarea {\r\n    width: 100%;\r\n    height: 100%;\r\n    background: none;\r\n    border: none;\r\n    outline: none;\r\n    color: inherit;\r\n    padding: 10px 5px;\r\n    resize: none;\r\n    font-size: 1rem;\r\n    font-family: inherit;\r\n  }\r\n}\r\n`;\r\n\r\nconst Note = (props) => {\r\n  /**\r\n   * the dispatch function of the state of 'Main' component \r\n   * @param {object} action\r\n   */\r\n  const mainStateDispatchFunction = useContext(mainStateDispatchContext);\r\n  const [tempBody, setTempBody] = useState(props.body);\r\n  const [tempBgColor, setTempBgColor] = useState(props.color);\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const style = {\r\n    backgroundColor: tempBgColor,\r\n    color: ((brightnessByColor(tempBgColor)) > 150 ? '#2b2a2a' : '#fcfcfa'),\r\n  };\r\n\r\n  /**\r\n   * to pass the temp state to the main state\r\n   */\r\n  const editSaveHandler = useCallback(() => {\r\n    mainStateDispatchFunction({\r\n      type: 'edit',\r\n      body: tempBody,\r\n      color: tempBgColor,\r\n      id: props.id,\r\n    });\r\n    setEditMode(false);\r\n  }, [tempBody, tempBgColor, editMode]);\r\n\r\n  /**\r\n   * to return the note to its last saved state\r\n   */\r\n  const editCancelHandler = useCallback(() => {\r\n    console.log(`props.body ${props.body}, props.color ${props.color}`)\r\n    setTempBody(props.body);\r\n    setTempBgColor(props.color);\r\n    setEditMode(false);\r\n  }, [tempBody, tempBgColor, editMode]);\r\n\r\n  /**\r\n   * passes the chosen color to the temp. state of the note\r\n   * @param {string} color\r\n   * @param {object} event\r\n   */\r\n  const handleColorChange = useCallback((color, event) => {\r\n    setTempBgColor(color.hex);\r\n  }, [tempBody, tempBgColor, editMode]);\r\n\r\n  const bodyEditable = <textarea value={tempBody} onChange={e => setTempBody(e.target.value)}></textarea>;\r\n  const bodyReadonly = <textarea value={tempBody} onClick={() => setEditMode(true)} readOnly></textarea>;\r\n  const deleteButton = <button onClick={ () => mainStateDispatchFunction({type: 'delete', id: props.id})}>{ icons.delete }</button>;\r\n  //note editing mode\r\n  const colorPicker = <GithubPicker onChangeComplete={handleColorChange}/>;\r\n  const saveButton = <button onClick={() => editSaveHandler()}>{icons.save} Save</button>;\r\n  const cancelButton = <button onClick={() => editCancelHandler()}>{icons.cancel} Cancel</button>;\r\n  return (\r\n    <NoteWrapper style={style}>\r\n      <NoteToolbar>\r\n        {editMode ? <> {colorPicker} {saveButton} {cancelButton}</> : <>{deleteButton}</> }\r\n      </NoteToolbar>\r\n      <NoteBody>\r\n        {editMode ? <>{bodyEditable}</> : <>{bodyReadonly}</>}\r\n      </NoteBody>\r\n    </NoteWrapper>\r\n  );\r\n}\r\n\r\nexport default React.memo(Note);\r\n","import React from 'react';\r\nimport Note from './Note';\r\n\r\nconst Notes = (props) => {\r\n  const { notes } = props;\r\n  // to sort the notes by descending order\r\n  const notesSorted = notes.sort((a, b) => b.timeAdded - a.timeAdded);\r\n\r\n  const notesJSX = notesSorted.map((note) => {\r\n    return <Note body={note.body} color={note.color} id={note.id} key={note.id} />;\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {notesJSX}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Notes;\r\n","import React, { useState, useContext, useCallback } from 'react';\r\nimport { mainStateDispatchContext } from './Main';\r\nimport styled from 'styled-components';\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nconst AddNoteWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #333;\r\n`;\r\n\r\nconst AddNoteButton = styled.button`\r\n  background: none;\r\n  border: none;\r\n  outline: none;\r\n  font-size: 3rem;\r\n  color: inherit;\r\n`;\r\n\r\nconst AddNote = (props) => {\r\n  /**\r\n   * the dispatch function of the state of 'Main' component\r\n   * @param {object} action\r\n   */\r\n  const mainStateDispatchFunction = useContext(mainStateDispatchContext);\r\n\r\n  const [noteTemp, setNoteTemp] = useState({\r\n    id: '',\r\n    body: '',\r\n    color: '#FEF3BD',\r\n    timeAdded: '',\r\n  });\r\n\r\n  const addIcon = <Icon name='add' />;\r\n\r\n  /**\r\n   * attaches a unique id to a blank note defined in its state and sends to\r\n   * Main component's dispatch function to\r\n   */\r\n  const onAdd = useCallback(() => {\r\n    // const dateAdded = new Date();\r\n    const addTime = new Date().getTime();\r\n    mainStateDispatchFunction({ type: 'add', newNote: noteTemp, timeAdded: addTime });\r\n    // the code below is to generate a new id for the next onAdd() event\r\n    const uniqueId = new Date().getUTCMilliseconds();\r\n    setNoteTemp({ ...noteTemp, id: uniqueId });\r\n  });\r\n\r\n  return (\r\n    <AddNoteWrapper>\r\n      <AddNoteButton onClick={() => onAdd()}>{addIcon}</AddNoteButton>\r\n    </AddNoteWrapper>\r\n  );\r\n}\r\n\r\nexport default AddNote;\r\n","import React, { useReducer } from 'react';\r\nimport styled from 'styled-components';\r\nimport Notes from './Notes';\r\nimport AddNote from './AddNote';\r\n\r\nexport const mainStateDispatchContext = React.createContext();\r\n\r\nconst NotesGrid = styled.div`\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    max-width: 1300px;\r\n    display: grid;\r\n    grid-gap: 20px;\r\n    grid-template-columns: repeat(auto-fit, 300px);\r\n    grid-auto-rows: minmax(100px, 300px);\r\n    justify-content: center;\r\n\r\n    @media screen and (max-width: 420px) {\r\n        grid-template-columns: 250px;\r\n        grid-template-rows: 100px;\r\n        grid-auto-rows: 250px;\r\n    }\r\n`;\r\n\r\nconst initialState = [\r\n  {\r\n    id: 147286491,\r\n    body: 'Welcome to NotesDesk! \\n\\nYou can add your own notes here by clicking on the plus icon. \\nTo edit the note or change its color, simply click on it. \\nHave a great experience!',\r\n    color: '#FEF3BD',\r\n    timeAdded: 1608212136484,\r\n  },\r\n];\r\n\r\nconst Main = (props) => {\r\n\r\n  const mainStateReducer = (value, action = {\r\n    type: null, newNote: null, id: null, color: null, timeAdded: null,\r\n  }) => {\r\n    if (action.type === 'edit') {\r\n      const newNotes = value;\r\n      const index = value.findIndex((note) => note.id === action.id);\r\n\r\n      if (index !== -1) {\r\n        newNotes[index].color = action.color;\r\n        newNotes[index].body = action.body;\r\n      }\r\n\r\n      return [...newNotes];\r\n    }\r\n\r\n    if (action.type === 'delete') {\r\n      const newNotes = value.filter((note) => !(note.id === action.id));\r\n      return newNotes;\r\n    }\r\n\r\n    if (action.type === 'add') {\r\n      const newNote = action.newNote;\r\n      newNote.timeAdded = action.timeAdded;\r\n      return [...value, newNote];\r\n    }\r\n    else { return value; }\r\n  };\r\n\r\n  const [notes, notesDispatch] = useReducer(mainStateReducer, initialState);\r\n\r\n  return (\r\n    <NotesGrid>\r\n      <mainStateDispatchContext.Provider value={notesDispatch}>\r\n        <AddNote notes={notes} />\r\n        <Notes notes={notes} />\r\n      </mainStateDispatchContext.Provider>\r\n    </NotesGrid>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport Main from './Main';\r\nimport styled from 'styled-components';\r\n\r\nconst AppBody = styled.div`\r\n    padding: 40px 10px;\r\n`;\r\n\r\nconst Body = (props) => {\r\n  return (\r\n    <AppBody>\r\n      <Main />\r\n    </AppBody>\r\n  );\r\n}\r\n\r\nexport default Body;\r\n","// import logo from './logo.svg';\nimport React from 'react';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Body from './components/Body';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport './App.css';\n\nconst stylingVariables = {\n  bgColor: '#fffcde',\n  black: '#121212',\n  gray: '#545353',\n  white: '#f7f7f7',\n};\n\nexport const styleContext = React.createContext();\n\nconst GlobalStyle = createGlobalStyle`\n  :root {\n    font-size: 1em;\n  }\n\n  @media screen and (max-width: 420px) {\n    :root {\n      font-size: 0.875em;\n    }\n  }\n`;\n\nconst AppWrapper = styled.div`\n  text-align: center;\n  /**/\n  background-color: ${stylingVariables.bgColor};\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nconst App = (props) => {\n  return (\n    <>\n      <GlobalStyle />\n      <styleContext.Provider value={stylingVariables}>\n        <AppWrapper>\n          <Header />\n          <Body />\n          <Footer />\n        </AppWrapper>\n      </styleContext.Provider>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}